
import java.awt.Image;
import java.net.NetworkInterface;
import java.util.ArrayList;
import javax.swing.DefaultCellEditor;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author waniya_mustafa
 */
public class CartFrame extends javax.swing.JFrame {

    ArrayList<Product> productsList;
    customer customerInstance = null;

    /**
     * Creates new form CartFrame
     */
    public CartFrame(customer customerIstance, ArrayList<Product> productsList) {
        this.productsList = productsList;
        this.customerInstance = customerIstance;
        initComponents();
        ImageIcon background_img = new ImageIcon(
                "C:\\Users\\MINAHIL SHAKOOR\\Desktop\\Grocery_Management_System_Java\\SMMS_Images\\cartframe.png", "");
        Image img = background_img.getImage();
        Image temp_img = img.getScaledInstance(1600, 850, Image.SCALE_SMOOTH);
        background_img = new ImageIcon(temp_img);
        JLabel backgrnd = new JLabel("", background_img, JLabel.CENTER);
        backgrnd.setBounds(0, 0, 1600, 850);
        this.add(backgrnd);
        this.setTitle("Cart");
        this.setResizable(false);
        checkoutBtn.setOpaque(true);
        deleteBtn.setOpaque(true);
        backBtn.setOpaque(true);
        increaseQtyBtn.setOpaque(true);
        this.setLocationRelativeTo(null);

        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);

        String[] col = { "ID", "Name", "Quantity", "Price" };
        ArrayList<order> orders = customerIstance.getOrders();
        DefaultTableModel tableModel = new DefaultTableModel(null, col);
        productsTable.setModel(tableModel);
        productsTable.setAutoResizeMode(JTable.AUTO_RESIZE_NEXT_COLUMN);
        TableColumnModel colModel = productsTable.getColumnModel();
        colModel.getColumn(0).setPreferredWidth(30);
        colModel.getColumn(1).setPreferredWidth(450);
        colModel.getColumn(2).setPreferredWidth(30);
        colModel.getColumn(3).setPreferredWidth(80);
        DefaultCellEditor editor = (DefaultCellEditor) productsTable.getDefaultEditor(Object.class);
        editor.setClickCountToStart(20);
        productsTable.setRowSelectionAllowed(true);
        for (int i = 0; i < orders.size(); i++) {

            if (orders.get(i).getType().equals("curr")) {
                int ID = orders.get(i).getID();
                int qty = orders.get(i).getQuantity();
                double price = orders.get(i).getTotalPrice();
                String data[] = { String.valueOf(ID), orders.get(i).getName(), String.valueOf(qty),
                        String.valueOf(price) };
                tableModel.addRow(data);

            }

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        productsTable = new javax.swing.JTable();
        checkoutBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        increaseQtyBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(168, 218, 220));
        setExtendedState(6);
        getContentPane().setLayout(null);

        productsTable.setBackground(new java.awt.Color(204, 204, 204));
        productsTable.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 255, 255), 2, true));
        productsTable.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        productsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Quantity", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productsTable);
        if (productsTable.getColumnModel().getColumnCount() > 0) {
            productsTable.getColumnModel().getColumn(0).setResizable(false);
            productsTable.getColumnModel().getColumn(1).setResizable(false);
            productsTable.getColumnModel().getColumn(2).setResizable(false);
            productsTable.getColumnModel().getColumn(3).setResizable(false);
        }

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(380, 60, 736, 422);

        checkoutBtn.setBackground(new java.awt.Color(255, 102, 102));
        checkoutBtn.setFont(new java.awt.Font("Hoefler Text", 1, 26)); // NOI18N
        checkoutBtn.setText("Check Out");
        checkoutBtn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 255, 255), 2, true));
        checkoutBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        checkoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutBtnActionPerformed(evt);
            }
        });
        getContentPane().add(checkoutBtn);
        checkoutBtn.setBounds(960, 550, 168, 43);

        deleteBtn.setBackground(new java.awt.Color(255, 102, 102));
        deleteBtn.setFont(new java.awt.Font("Hoefler Text", 1, 26)); // NOI18N
        deleteBtn.setText("Delete");
        deleteBtn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 255, 255), 2, true));
        deleteBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });
        getContentPane().add(deleteBtn);
        deleteBtn.setBounds(710, 550, 161, 43);

        backBtn.setBackground(new java.awt.Color(255, 102, 102));
        backBtn.setFont(new java.awt.Font("Hoefler Text", 1, 26)); // NOI18N
        backBtn.setText("Back");
        backBtn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 255, 255), 2, true));
        backBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        getContentPane().add(backBtn);
        backBtn.setBounds(1150, 30, 104, 39);

        increaseQtyBtn.setBackground(new java.awt.Color(255, 102, 102));
        increaseQtyBtn.setFont(new java.awt.Font("Hoefler Text", 1, 26)); // NOI18N
        increaseQtyBtn.setText("Increase Qty");
        increaseQtyBtn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 255, 255), 2, true));
        increaseQtyBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        increaseQtyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                increaseQtyBtnActionPerformed(evt);
            }
        });
        getContentPane().add(increaseQtyBtn);
        increaseQtyBtn.setBounds(450, 550, 180, 43);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cartframe.png"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(-3, -4, 1300, 730);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_backBtnActionPerformed
        this.setVisible(false);
    }// GEN-LAST:event_backBtnActionPerformed

    private void increaseQtyBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_increaseQtyBtnActionPerformed
        // TODO add your handling code here:
        int row = productsTable.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Please Select a Product to increase its Quantity!", "ALERT",
                    JOptionPane.INFORMATION_MESSAGE);

        } else {
            String val = productsTable.getModel().getValueAt(row, 0).toString();
            int ID = Integer.parseInt(val);
            ArrayList<order> or;
            or = customerInstance.getOrders();
            for (int i = 0; i < or.size(); i++) {
                if (ID == or.get(i).getID() && or.get(i).getType().equals("curr")) {
                    int qty = or.get(i).getQuantity();

                    for (int j = 0; j < productsList.size(); j++) {
                        if (ID == productsList.get(j).getID()) {
                            double price = productsList.get(j).getPrice();
                            if ((qty + 1) <= productsList.get(j).getQuantity()) {
                                qty += 1;
                                price = price * qty;
                                order neworder = new order(or.get(i).getID(), or.get(i).getName(), qty, price, "curr");
                                or.remove(or.get(i));
                                or.add(neworder);
                                CartFrame main = new CartFrame(customerInstance, productsList);
                                main.setVisible(true);
                                this.dispose();
                                break;
                            } else {
                                JOptionPane.showMessageDialog(this, "Product is OUT OF STOCK!", "ALERT",
                                        JOptionPane.INFORMATION_MESSAGE);
                                CartFrame main = new CartFrame(customerInstance, productsList);
                                main.setVisible(true);
                                this.dispose();
                                break;

                            }
                        }

                    }
                    break;
                }

            }

        }
    }// GEN-LAST:event_increaseQtyBtnActionPerformed

    private void checkoutBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_checkoutBtnActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        RecieptFrame rf = new RecieptFrame(customerInstance);
        rf.setVisible(true);
    }// GEN-LAST:event_checkoutBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        int row = productsTable.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Please Select a Product to show Delete Product!", "ALERT",
                    JOptionPane.INFORMATION_MESSAGE);

        } else {
            String val = productsTable.getModel().getValueAt(row, 0).toString();
            int i = Integer.parseInt(val);
            ArrayList<order> or;
            or = customerInstance.getOrders();
            for (int j = 0; j < or.size(); j++) {
                if (or.get(j).getID() == i && or.get(j).getType().equals("curr")) {
                    or.remove(or.get(j));
                    customerInstance.setOrders(or);
                    break;

                }
            }

            boolean flag = false;
            ArrayList<order> ors = customerInstance.getOrders();
            for (int j = 0; j < ors.size(); j++) {
                if (ors.get(j).getType().equals("curr")) {
                    flag = true;
                    break;
                }
            }
            if (!flag) {
                JOptionPane.showMessageDialog(this, "Your Cart is Empty!", "ALERT", JOptionPane.INFORMATION_MESSAGE);
                this.setVisible(false);

            } else {
                CartFrame obj1 = new CartFrame(customerInstance, productsList);
                obj1.setVisible(true);
            }

        }
    }// GEN-LAST:event_deleteBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JButton checkoutBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton increaseQtyBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable productsTable;
    // End of variables declaration//GEN-END:variables
}
